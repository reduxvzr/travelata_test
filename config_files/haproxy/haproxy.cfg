global
	log /dev/log	local0
	log /dev/log	local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

	# Default SSL material locations
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private

	# See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
	log	global
	mode	http
	option	httplog
	option	dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http

	timeout client 30s
	timeout connect 5s
	timeout server 30s
	timeout http-request 10s
# Enable web-page with stats information
frontend stats
    mode http
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 10s
    stats admin if LOCALHOST


frontend master_front
	bind :5001
	mode tcp
	default_backend master_back

backend master_back
	mode tcp
	#option pgsql-check user cluster
	option tcp-check
	server master_node db.master.lan:5050 check
frontend slave_node 
	bind :5002
	mode tcp
	default_backend slave_back

backend slave_back
	mode tcp
	#option pgsql-check user cluster
	option tcp-check
	server slave_node db.slave.lan:5050 check

frontend balance
	mode tcp 
	bind :5010
	default_backend pg_cluster

backend pg_cluster	
	mode tcp
	#option pgsql-check user cluster
	option tcp-check
	option httpchk GET /primary  # patroni provides an endpoint to check node roles
	http-check expect status 200  # expect 200 for the primary node
	server master db.master.lan:5050 check port 8888 check verify none
	server slave  db.slave.lan:5050 check port 8888 check verify none


