---
- name: Install PostgreSQL and check status
  hosts: database
  become: true
  gather_facts: false
  tasks:
    - name: Install PostgreSQL
      ansible.builtin.apt:
        name: postgresql
        state: present
        update_cache: true
        install_recommends: false

    - name: Check service
      ansible.builtin.service:
        name: postgresql
        state: stopped
        enabled: false

# for postgresql testing
# - name: Correct configs for PostgreSQL on the master node
#   hosts: master
#   become: true
#   gather_facts: false
#   tasks:
#     - name: Edit or ensure port for the service
#       ansible.builtin.lineinfile:
#         path: /etc/postgresql/15/main/postgresql.conf
#         regexp: '^port ='
#         line: port = 5001
#         state: present

#     - name: Let's listen all incoming connections
#       ansible.builtin.lineinfile:
#         path: /etc/postgresql/15/main/postgresql.conf
#         regexp: '^\s*listen_addresses\s*='
#         line: "listen_addresses = '*'"
#         state: present

#     - name: Restart service after editing of configs
#       ansible.builtin.service:
#         name: postgresql
#         state: stopped

- name: Configure etcd on the MASTER database machine
  hosts: master
  become: true
  gather_facts: false
  tasks:
    - name: Copy etcd file
      ansible.builtin.copy:
        src: ../config_files/etcd_master
        dest: /etc/default/etcd
        owner: root
        group: root
        mode: '0644'

    # Create always empty directory
    - name: Create data directory
      ansible.builtin.file:
        path: /var/lib/etcd
        state: directory
        force: true
        mode: '0770'
        owner: etcd
        group: etcd

    - name: Install etcd
      ansible.builtin.apt:
        pkg:
          - etcd-client
          - etcd-server
          - etcd-discovery
        state: present
        update_cache: true

    - name: Clear old values of the cluster in base
      ansible.builtin.command: etcdctl del "" --prefix
      # register: etcdctl_output
      # changed_when: etcdctl_output.rc != 0
      changed_when: false

    - name: Restart etcd service
      ansible.builtin.service:
        name: etcd
        state: restarted
        enabled: true

- name: Configure etcd on the SLAVE database machine
  hosts: slave
  become: true
  gather_facts: false
  tasks:
    - name: Copy etcd file
      ansible.builtin.copy:
        src: ../config_files/etcd_slave
        dest: /etc/default/etcd
        owner: root
        group: root
        mode: '0644'

    - name: Install etcd
      ansible.builtin.apt:
        pkg:
          - etcd-client
          - etcd-server
          - etcd-discovery
        state: present
        update_cache: true

    - name: Clear old values of the cluster in base
      ansible.builtin.command: etcdctl del "" --prefix
      # register: etcdctl_output
      # changed_when: etcdctl_output.rc != 0
      changed_when: false

    - name: Restart etcd service
      ansible.builtin.service:
        name: etcd
        state: restarted
        enabled: true


- name: Configure etcd on the another ETCD machine
  hosts: etcd
  become: true
  gather_facts: false
  tasks:
    - name: Copy etcd file
      ansible.builtin.copy:
        src: ../config_files/etcd_server
        dest: /etc/default/etcd
        owner: root
        group: root
        mode: '0644'

    - name: Install etcd
      ansible.builtin.apt:
        pkg:
          - etcd-client
          - etcd-server
          - etcd-discovery
        state: present
        update_cache: true

    - name: Clear old values of the cluster in base
      ansible.builtin.command: etcdctl del "" --prefix
      # register: etcdctl_output
      # changed_when: etcdctl_output.rc != 0
      changed_when: false

    - name: Restart etcd service
      ansible.builtin.service:
        name: etcd
        state: restarted
        enabled: true

    - name: Get status of etcd
      ansible.builtin.command: etcdctl --cluster=true endpoint status --write-out=table
      changed_when: false
      register: etcd_status

    - name: Print it
      ansible.builtin.debug:
        msg: "{{ etcd_status.stdout_lines }}"

    - name: Get etcd members
      ansible.builtin.command: etcdctl member list --write-out=table
      changed_when: false
      register: etcd_members

    - name: Print it
      ansible.builtin.debug:
        msg: "{{ etcd_members.stdout_lines }}"

- name: Copy patroni config (MASTER)
  hosts: master
  become: true
  gather_facts: false
  tasks:
    - name: Create directory
      ansible.builtin.file:
        path: /etc/patroni
        state: directory
        mode: '0755'
        owner: root
        group: root

    - name: Copy the patroni configuration file to the MASTER
      ansible.builtin.copy:
        src: ../config_files/patroni_master.yml
        dest: /etc/patroni/config.yml
        owner: postgres
        group: postgres
        mode: '0750'

- name: Copy patroni config (SLAVE)
  hosts: slave
  become: true
  gather_facts: false
  tasks:
    - name: Create directory
      ansible.builtin.file:
        path: /etc/patroni
        state: directory
        mode: '0755'
        owner: root
        group: root

    - name: Copy the patroni configuration file to the REPLICA
      ansible.builtin.copy:
        src: ../config_files/patroni_slave.yml
        dest: /etc/patroni/config.yml
        owner: postgres
        group: postgres
        mode: '0750'

- name: Configure Patroni
  hosts: database
  become: true
  gather_facts: false
  tasks:
    - name: Install patroni package
      ansible.builtin.apt:
        name: patroni
        update_cache: true
        state: present

    - name: Create unnecessary directory for certs
      ansible.builtin.file:
        path: /var/lib/postgresql/15/ssl
        state: directory
        mode: '0750'
        owner: postgres
        group: postgres

    - name: Create data directory for database
      ansible.builtin.file:
        path: /var/lib/postgresql/15/data
        state: directory
        force: true
        mode: '0750'
        owner: postgres
        group: postgres

    - name: Copy certificates on the machines
      ansible.builtin.copy:
        src: ../certs/
        dest: /var/lib/postgresql/15/ssl/
        remote_src: false
        owner: postgres
        group: postgres
        mode: '0600'
        directory_mode: '0750'

    - name: Start services
      ansible.builtin.service:
        name: patroni
        enabled: true
        state: restarted

    - name: Get patronictl status
      ansible.builtin.command: patronictl -c /etc/patroni/config.yml list
      changed_when: false
      register: out

    - name: Get time for Pantroni initializing
      ansible.builtin.pause:
        minutes: 2

    - name: Print it
      ansible.builtin.debug:
        msg: "{{ out.stdout_lines }}"

# start
- name: Stop Patroni
  hosts: database
  become: true
  gather_facts: false
  tasks:
    - name: Stop service
      ansible.builtin.service:
        name: patroni
        state: stopped

- name: Clear values from WAL
  hosts: etcd_cluster
  become: true
  gather_facts: false
  tasks:
    - name: Clear old values of the cluster in base
      ansible.builtin.command: etcdctl del "" --prefix
      # register: etcdctl_output
      # changed_when: etcdctl_output.rc != 0
      changed_when: false

    - name: Stop etcd service
      ansible.builtin.service:
        name: etcd
        state: stopped

    - name: Start etcd service
      ansible.builtin.service:
        name: etcd
        state: started

- name: Delete Patroni files
  hosts: database
  become: true
  gather_facts: false
  tasks:
    - name: Remove files
      ansible.builtin.command: trash-put /var/lib/postgresql/15/data
      changed_when: true

- name: Stop Patroni
  hosts: database
  become: true
  gather_facts: false
  tasks:
    - name: Stop service
      ansible.builtin.service:
        name: patroni
        state: started

    - name: Get patronictl status
      ansible.builtin.command: patronictl -c /etc/patroni/config.yml list
      changed_when: false
      register: out

    - name: Get time for Pantroni initializing
      ansible.builtin.pause:
        minutes: 2

    - name: Print it
      ansible.builtin.debug:
        msg: "{{ out.stdout_lines }}"

- name: Install haproxy and run service
  hosts: haproxy
  become: true
  gather_facts: false
  tasks:
    - name: Install HAProxy
      ansible.builtin.apt:
        name: haproxy
        state: present
        update_cache: true
        install_recommends: false

    - name: Check service status
      ansible.builtin.service:
        name: haproxy
        state: started
        enabled: true

- name: Change haproxy.cfg and start load balance to the nodes (copy file from the project directory)
  hosts: vip_hap
  become: true
  gather_facts: false
  tasks:
    - name: Edit or ensure config file for haproxy
      ansible.builtin.copy:
        src: ../config_files/haproxy.cfg
        dest: /etc/haproxy/haproxy.cfg
        owner: root
        group: root
        mode: '0644'

    - name: Restart haproxy service
      ansible.builtin.service:
        name: haproxy
        enabled: true
        state: restarted

- name: Run keepalived services for MASTER Haproxy
  hosts: haproxy_vip
  become: true
  gather_facts: false
  tasks:
    - name: Copy conf on MASTER HAProxy node
      ansible.builtin.copy:
        src: ../config_files/keepalived_master_haproxy.conf
        dest: /etc/keepalived/keepalived.conf
        owner: root
        group: root
        mode: '0644'

    - name: Ensure or run keepalived service for Master
      ansible.builtin.service:
        name: keepalived
        state: restarted
        enabled: true

- name: Run keepalived services for BACKUP Haproxy
  hosts: haproxy_vip
  become: true
  gather_facts: false
  tasks:
    - name: Copy conf on BACKUP HAProxy node
      ansible.builtin.copy:
        src: ../config_files/keepalived_backup_haproxy.conf
        dest: /etc/keepalived/keepalived.conf
        owner: root
        group: root
        mode: '0644'

    - name: Ensure or run keepalived service for BACKUP
      ansible.builtin.service:
        name: keepalived
        state: restarted
        enabled: true
